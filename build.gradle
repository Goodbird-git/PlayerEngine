plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'io.github.ladysnake.chenille' version "0.11.3"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group project.maven_group
version project.mod_version

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

compileJava {
    options.encoding = "UTF-8"
}


sourceSets {
    autoclef {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
        runtimeClasspath += main.compileClasspath + main.runtimeClasspath + main.output
    }

    launch {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output + autoclef.compileClasspath + autoclef.runtimeClasspath + autoclef.output
        runtimeClasspath += main.compileClasspath + main.runtimeClasspath + main.output + autoclef.compileClasspath + autoclef.runtimeClasspath + autoclef.output
    }
}

repositories {
    mavenCentral()

    chenille.repositories {
        ladysnake()
        jamieswhiteshirt()
    }

    maven {
        name = 'Quilt Snapshots'
        url = 'https://maven.quiltmc.org/repository/snapshot'
    }

    maven {
        url = "https://maven.quiltmc.org/repository/release/"
    }

    mavenLocal()

    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2"
    modImplementation "net.fabricmc:fabric-loader:0.15.6"
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.92.1+1.20.1"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}") {
        transitive = false
    }
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}") {
        transitive = false
    }
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${cca_version}") {
        transitive = false
    }

    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'

    shadow('com.fasterxml.jackson.core:jackson-core:2.16.0')
    shadow('com.fasterxml.jackson.core:jackson-annotations:2.16.0')
    shadow('com.fasterxml.jackson.core:jackson-databind:2.16.0')
}

shadowJar {
    configurations = [project.configurations.shadow]

    archiveBaseName.set('PlayerEngine')
    archiveClassifier.set('dev')

    from sourceSets.launch.output
    from sourceSets.main.output
    from sourceSets.autoclef.output

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }

    manifest {
        attributes(tasks.jar.manifest.attributes)
        attributes('MixinConfigs': 'mixins.automatone.json')
    }
}

remapJar {
    dependsOn("shadowJar")
    archiveBaseName.set('PlayerEngine')
    archiveClassifier.set('')
    input.set(shadowJar.archiveFile)
}

processLaunchResources {
    inputs.property "version", project.version
    filesMatching('quilt.mod.json') {
        expand "version": project.version
    }
}

java {
    withSourcesJar()
}

javadoc {
    options.addStringOption('Xwerror', '-quiet')
    options.linkSource true
    options.encoding "UTF-8"
    source = sourceSets.main.allJava
    classpath += sourceSets.main.compileClasspath
}

jar {
    from sourceSets.launch.output, sourceSets.main.output, sourceSets.autoclef.output

    preserveFileTimestamps = false
    reproducibleFileOrder = true

    manifest {
        attributes(
                'MixinConfigs': 'mixins.automatone.json',

                'Implementation-Title': 'PlayerEngine',
                'Implementation-Version': project.version
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-Xmaxerrs", "500000"]
}